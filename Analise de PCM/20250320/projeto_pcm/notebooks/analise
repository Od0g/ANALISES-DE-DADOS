import pandas as pd
import os
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# Definir caminho da pasta dos arquivos
data_path = "/workspaces/ANALISES-DE-DADOS/Analise de PCM/20250320/projeto_pcm/data/raw/"

# Listar arquivos CSV na pasta
arquivos = [f for f in os.listdir(data_path) if f.endswith('.csv')]

# Lista para armazenar os DataFrames
df_list = []

# Carregar os arquivos CSV com tratamento de erro
for f in arquivos:
    file_path = os.path.join(data_path, f)
    
    try:
        df_temp = pd.read_csv(file_path, encoding='utf-8', on_bad_lines="skip")  # Ignora linhas com erro
        print(f"Colunas de {f}: {df_temp.columns.tolist()}")  # Exibe as colunas do arquivo
        
        # Adiciona apenas se tiver a coluna 'DATA_ABERTURA'
        if 'DATA_ABERTURA' in df_temp.columns:
            df_list.append(df_temp)
        else:
            print(f"Aviso: '{f}' não contém a coluna 'DATA_ABERTURA' e será ignorado.")
    
    except Exception as e:
        print(f"Erro ao carregar {f}: {e}")

# Verifica se há arquivos carregados corretamente
if not df_list:
    raise ValueError("Nenhum arquivo foi carregado corretamente.")

# Unir todos os DataFrames
df = pd.concat(df_list, ignore_index=True)

# Converter colunas de data para datetime
df['DATA_ABERTURA'] = pd.to_datetime(df['DATA_ABERTURA'], errors='coerce')
df['DATA_FECHAMENTO'] = pd.to_datetime(df['DATA_FECHAMENTO'], errors='coerce')

# Remover valores inconsistentes
df = df.dropna(subset=['DATA_ABERTURA', 'DATA_FECHAMENTO'])  # Remove linhas sem datas
df = df[df['DATA_FECHAMENTO'] >= df['DATA_ABERTURA']]  # Remove registros invertidos

# Criar coluna de tempo de atendimento
df['TEMPO_ATENDIMENTO'] = (df['DATA_FECHAMENTO'] - df['DATA_ABERTURA']).dt.total_seconds() / 3600  # Em horas

# Estatísticas gerais
tempo_atendimento_stats = df['TEMPO_ATENDIMENTO'].describe()

# Análise por período
df['MES'] = df['DATA_ABERTURA'].dt.to_period('M')
df['TRIMESTRE'] = df['DATA_ABERTURA'].dt.to_period('Q')
df['SEMESTRE'] = df['DATA_ABERTURA'].dt.to_period('2Q')
df['ANO'] = df['DATA_ABERTURA'].dt.to_period('Y')

# Agrupar por setor e calcular estatísticas
if 'SETOR' in df.columns:
    df_setor = df.groupby('SETOR')['TEMPO_ATENDIMENTO'].describe()
    df_setor.to_csv("/workspaces/ANALISES-DE-DADOS/Analise de PCM/20250320/projeto_pcm/reports/relatorio.csv")

# Criar gráficos
plt.figure(figsize=(12, 6))
sns.boxplot(x='SETOR', y='TEMPO_ATENDIMENTO', data=df)
plt.xticks(rotation=45)
plt.title("Tempo de Atendimento por Setor")
plt.show()

plt.figure(figsize=(12, 6))
df['MES'].value_counts().sort_index().plot(kind='bar', color='blue')
plt.title("Número de OS por Mês")
plt.show()

df.head(), df.tail()

